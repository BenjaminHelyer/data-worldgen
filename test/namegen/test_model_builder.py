"""
Testsfor the model builder of the namegen module.
"""

from namegen import build_weighted_markov_chain, generate_name

import pytest
import pandas as pd


@pytest.mark.parametrize("name", ["Bob", "Sue", "Test"])
def test_markov_chain_deterministic_single_name_can_generate(name):
    """
    Given a single name, we should see only that name be generated by the Markov model.

    This test ensures that, end-to-end, the name handed in is the name generated.
    """
    df = pd.DataFrame({"Name": [name], "Count": [1]})
    model = build_weighted_markov_chain(df, n=3)

    for _ in range(10):
        generated = generate_name(model, n=3)
        assert generated == name

@pytest.mark.parametrize("name", ["Bob", "Sue", "Test"])
def test_markov_chain_deterministic_single_name_model_probabilities(name):
    """
    Given a single name, we should see only that name be generated by the Markov model.

    This test ensures that the model looks correct in terms of its probabilities being
    entirely unity.
    """
    df = pd.DataFrame({"Name": [name], "Count": [1]})
    model = build_weighted_markov_chain(df, n=3)

    # Check all prefix â†’ next_char transitions have probability 1.0
    for prefix, next_probs in model.items():
        assert len(next_probs) == 1  # only one possible next character
        for char, prob in next_probs.items():
            assert prob == pytest.approx(1.0)

